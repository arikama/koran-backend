// Code generated by MockGen. DO NOT EDIT.
// Source: ./google_auth_manager.go

// Package managers is a generated GoMock package.
package managers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// GoogleAuthManagerMock is a mock of GoogleAuthManager interface.
type GoogleAuthManagerMock struct {
	ctrl     *gomock.Controller
	recorder *GoogleAuthManagerMockMockRecorder
}

// GoogleAuthManagerMockMockRecorder is the mock recorder for GoogleAuthManagerMock.
type GoogleAuthManagerMockMockRecorder struct {
	mock *GoogleAuthManagerMock
}

// NewGoogleAuthManagerMock creates a new mock instance.
func NewGoogleAuthManagerMock(ctrl *gomock.Controller) *GoogleAuthManagerMock {
	mock := &GoogleAuthManagerMock{ctrl: ctrl}
	mock.recorder = &GoogleAuthManagerMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GoogleAuthManagerMock) EXPECT() *GoogleAuthManagerMockMockRecorder {
	return m.recorder
}

// AuthUserCode mocks base method.
func (m *GoogleAuthManagerMock) AuthUserCode(userAuthCode string) (*GoogleUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUserCode", userAuthCode)
	ret0, _ := ret[0].(*GoogleUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthUserCode indicates an expected call of AuthUserCode.
func (mr *GoogleAuthManagerMockMockRecorder) AuthUserCode(userAuthCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUserCode", reflect.TypeOf((*GoogleAuthManagerMock)(nil).AuthUserCode), userAuthCode)
}
